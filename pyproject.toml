[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[project]
name = "fastapi-starter"
version = "0.1.0"
description = "A FastAPI starter template for API projects"
readme = "README.md"
requires-python = ">=3.12"
authors = [{ name = "gukt", email = "gukaitong@gmail.com" }]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    "redis>=5.0.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "loguru>=0.7.0",
    "httpx>=0.25.0",
    "structlog>=23.2.0",
    "aiosqlite>=0.21.0",
    "email-validator>=2.3.0",
    "asyncpg>=0.30.0",
    "bcrypt>=4.3.0",
]

[project.optional-dependencies]
dev = [
    "uv>=0.1.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pre-commit>=3.5.0",
    "black>=23.11.0",
    "isort>=5.12.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "factory-boy>=3.3.0",
]

[project.urls]
Homepage = "https://github.com/gukt/fastapi-starter"
Documentation = "https://github.com/gukt/fastapi-starter#readme"
Repository = "https://github.com/gukt/fastapi-starter.git"
Issues = "https://github.com/gukt/fastapi-starter/issues"
Changelog = "https://github.com/gukt/fastapi-starter/releases"

[project.scripts]
fastapi-starter = "app.main:main"

[tool.uv]
index-url = "https://mirrors.aliyun.com/pypi/simple/"
dev-dependencies = [
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pre-commit>=3.5.0",
]

[tool.ruff]
line-length = 88
target-version = "py311"
fix = true

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "F",      # pyflakes
    "W",      # pycodestyle warnings
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "W191", # indentation contains tabs
    "B904", # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

# [tool.mypy]
# python_version = "3.11"
# check_untyped_defs = true
# disallow_any_generics = true
# disallow_incomplete_defs = true
# disallow_untyped_defs = true
# no_implicit_optional = true
# warn_redundant_casts = true
# warn_unused_ignores = true
# warn_return_any = true
# strict_equality = true
# plugins = ["pydantic.mypy"]

# [[tool.mypy.overrides]]
# module = ["passlib.*", "jose.*", "redis.*", "structlog.*"]
# ignore_missing_imports = true

# [tool.pytest.ini_options]
# minversion = "7.0"
# addopts = "-ra -q --strict-markers --strict-config"
# testpaths = ["tests"]
# pythonpath = ["app"]
# asyncio_mode = "auto"
# filterwarnings = [
#     "ignore::DeprecationWarning",
#     "ignore::PendingDeprecationWarning",
# ]

# [tool.coverage.run]
# source = ["app"]
# omit = ["app/tests/*", "app/alembic/*"]

# [tool.coverage.report]
# exclude_lines = [
#     "pragma: no cover",
#     "def __repr__",
#     "if self.debug:",
#     "if settings.DEBUG",
#     "raise AssertionError",
#     "raise NotImplementedError",
#     "if 0:",
#     "if __name__ == .__main__.:",
#     "class .*\\bProtocol\\):",
#     "@(abc\\.)?abstractmethod",
# ]
